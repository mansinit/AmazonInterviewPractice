class BST:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
def preorder(root):
    if root is None:
        return
    print(root.data)
    preorder(root.left)
    preorder(root.right)
#recursive sum is easier
def sum(root):
    if root is None:
        return 0
    return sum(root.left)+root.data+sum(root.right)
#sum of all nodes iterative would be implementing only using queue
def sum_iterative(root):
    queue=[]
    if root is None:
        return 0
    queue.append(root)
    print(queue)
    sum=0
    while len(queue)!=0:
        root=queue.pop(0)
        x=((root.data))
        sum+=x
        if root.left:
            queue.append(root.left)
        if root.right:
            queue.append(root.right)
    return sum
# for boundary traversal iterative process, we will use stack 
# first we will add to the stack the left boundary excluding leaves
# then for leaves we will apply preorder traversal because of root left right
# again for right boundary since its' bottom to top, we will use another stack and push it in the main stack

# there is one difference between finding boundary traversal for binary tree and complete binary tree
# in a complete binary tree, we only need left and right nodes
def stack_of_left_boundary(root,stack):
    if root:
        #left boundary implemented
        while True:
            if root is None:
                break
            if root:
                if (root.left is not None or root.right is not None):
                    stack.append(root.data)
            if root.left is not None:
                root=root.left
            elif root.right is not None:
                root=root.right
            elif root.left is None and root.right is None:
                break
    return stack
def stack_of_right_boundary(root,stack):
    if root:
        while True:
            if root is None:
                break
            if root:
                if root.left is not None or root.right is not None:
                    stack.append(root.data)
            if root.right is not None:
                root=root.right
            elif root.left is not None:
                root=root.left
            elif root.left is None and root.right is None:
                break
    return stack
    
def stack_of_leaves_left(root,stack):
    #use bsf and implement queue to get leaf nodes
    queue=[]
    if root:
        queue.append(root)
    else:
        return None
    while len(queue)!=0:
        root=queue.pop(0)
        if root.left:
            queue.append(root.left)
        if root.right:
            queue.append(root.right)
        if root.left is None and root.right is None:
            stack.append(root.data)
    return stack
def boundary_traversal(root):
    #left boundary first but don't print leaves
    #then leaves
    #right boundary last and don;t print leaves
    stack=[]
    stack_right=[]
    stack_left=stack_of_left_boundary(root,stack)
    stack_leaves_left=stack_of_leaves_left(root,stack_left)
    stack_leaves_right=stack_of_right_boundary(root,stack_right)
    while len(stack_leaves_right)!=0:
        stack_leaves_left.append(stack_leaves_right.pop())
    return stack_leaves_left
root=BST(20)
root.left=BST(10)
root.right=BST(30)
root.left.left=BST(5)
root.left.right=BST(7)
root.left.right.right=BST(9)
root.right.left=BST(40)
root.right.left.right=BST(80)
preorder(root)
print(sum_iterative(root))
print(boundary_traversal(root))
